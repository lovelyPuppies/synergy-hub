list of level 1 subjects
  - Nix
  - Nix 🔪⭕ Home Manager
  - Nix 🔪⭕ Flake
  

※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※  
⚓⭕ Nix ; https://pixi.sh/latest/
  https://github.com/prefix-dev/pixi?tab=readme-ov-file
  Nix is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem.


----------------------------------------------
Nix 🔪⚓ Download ; https://nixos.org/download/
  ⭕ Multi-user installation (recommended)
    Install Nix via the recommended multi-user installation:
      $ sh <(curl -L https://nixos.org/nix/install) --daemon
    We recommend the multi-user install if you are on Linux running systemd, with SELinux disabled and you can authenticate with sudo.


----------------------------------------------
Nix 🔪⚓🖇️ How Nix Works ; https://nixos.org/guides/how-nix-works/ 📅 2024-08-31 16:25:29
  💡 Not using ‘global’ directories such as /bin is what allows multiple versions of a package to coexist. Nix does have a /etc to keep system-wide configuration files, but most files in that directory are symlinks to generated files in /nix/store.

  * System Management
    └─ Portability
    └─ Complete dependencies
      🔑📍 ... you are supposed to declare its dependencies, but you can’t easily guarantee that your dependency declaration is complete. 
        If you forget a dependency, that you have separately installed on your machine, then the component may build and work correctly on your machine, but failing on the end user’s machine.

  * Upgrade and Rollback
    └─ (Atomic, reliable) upgrades and rollbacks
      # contents
        ... So during a package upgrade, there is no 🪱 time window ...
        And since packages 🚣 aren’t overwritten, the old versions are still there after an upgrade. 📍 This means that you can roll back to the old version:
        %shell> nix-env --upgrade _some-packages_
        %shell> nix-env --rollback
      
      # Atomic upgrades
        ... 🪱 transactional .. atomic ...
        ... In most other systems, you’ll end up in an inconsistent state, and your machine may not even boot anymore.
      # Rollbacks
        👍 So if the new configuration crashes or doesn’t boot properly, you can just roll back by selecting an older configuration in the boot menu.
        👍 Rollbacks are very fast: it doesn’t involve lots of files having to be restored from copies.
      # Reliable upgrades
        📍 Another advantage of purely functional package management is that nixos-rebuild switch will always produce the same result, regardless of what packages or configuration files you already had on your system.
        Thus, upgrading a system is as reliable as reinstalling from scratch.
  
  * Configuration Management
    └─ Multi-user support
      Starting at version 0.11, Nix has multi-user support. This means that non-privileged users can securely install software.
      ⚖️ Each user can have a different profile, ...
      📍 If a user installs a package that another user has already installed previously, the package won’t be built or downloaded a second time.
      At the same time, it is not possible for one user to inject a Trojan horse into a package that might be used by another user.

    └─ Safe to test changes
        This builds and activates the new configuration, but doesn’t make it the boot default. Thus, rebooting the system will take you back to the previous, known-good configuration.
          %shell> nixos-rebuild test

        📍 The build-vm command is very efficient (it doesn’t require a disk image for the VM to be created), so it’s a very effective way to test changes.
        %shell> nixos-rebuild build-vm
        %shell> ./result/bin/run-\*-vm
    └─ Declarative system configuration model
        The fact that it’s purely functional essentially means that building a new configuration cannot overwrite previous configurations
        %shell> nixos-rebuild switch
    └─ Reproducible system configurations
      You just copy the configuration.nix file to the target NixOS machine and run nixos-rebuild switch.
      ⚠️ This will give you the same configuration (kernel, applications, system services, and so on) except for ‘mutable state’ (such as the stuff that lives in /var).

  * Package Management
    └─ Multiple versions
      ... 💡 it prevents the “DLL hell”. Because of the hashing scheme
      ... since these operations never 🚣 “destructively” update or delete files that are used by other packages.
    └─ Functional package language
      A 🪱 Nix expression describes everything that goes into a package build action (a “derivation”): other packages, sources, the build script, environment variables for the build script, etc.
      Nix tries very hard to ensure that Nix expressions are 🪱 deterministic

    └─ Transparent source/binary deployment
      🪱 source deployment model
      📍⚖️ For most users, building from source is not very pleasant as it takes far too long.
        However, Nix can automatically skip building from source and instead use a 🪱 binary cache, a web server that provides pre-built binaries. 
    └─ Garbage collection
      %shell> nix-env --uninstall firefox
        🔑 the package isn’t deleted from the system right away (after all, you might want to do a rollback, or it might be in the profiles of other users)
      %shell> nix-collect-garbage
        This deletes all packages that aren’t in use by any user profile or by a currently running program.

    └─ Nix Packages collection
      https://github.com/NixOS/nixpkgs ; 🪱 large set of Nix expressions containing thousands of existing Unix packages

----------------------------------------------
Nix 🔪⚓ Tutorials ; https://nix.dev/tutorials/
  ⚓ First steps ; https://nix.dev/tutorials/first-steps/


※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※  
⚓ Nix 🔪⭕ Home Manager ; https://github.com/nix-community/home-manager
  This project provides a basic system for managing a user environment using the Nix package manager together with the Nix libraries found in Nixpkgs.
    https://github.com/NixOS/nixpkgs
  It allows 🪱 declarative configuration of user specific (non-global) packages and dotfiles.

  #️⃣🔰 Using Home Manager ; https://nix-community.github.io/home-manager/index.xhtml#ch-usage
    
  

  
----------------------------------------------
Home Manager 🔪#️⃣ Installation ; https://github.com/nix-community/home-manager?tab=readme-ov-file#installation
  Home Manager can be used in three primary ways:
    ⭕ 1. Using the standalone home-manager tool.; https://nix-community.github.io/home-manager/#sec-install-standalone
      
      For platforms other than NixOS and Darwin, this is the only available choice.
      It is also recommended for people on NixOS or Darwin that want to manage their home directory independently of the system as a whole
  
----------------------------------------------
Home Manager 🔪⚓ Manual ; https://nix-community.github.io/home-manager/



※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※  
⚓ Nix 🔪⭕ Flake ; https://github.com/nix-community/home-manager
  Flakes are the unit for packaging Nix code in a reproducible and discoverable way
  A flake is a filesystem tree (typically fetched from a Git repository or a tarball) that contains a file named flake.nix in the root directory. flake.nix specifies some metadata about the flake such as dependencies (called inputs), as well as its outputs (the Nix values such as packages or NixOS modules provided by the flake).





`