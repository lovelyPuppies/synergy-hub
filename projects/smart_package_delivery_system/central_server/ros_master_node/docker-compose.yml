services:
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    ports:
      - "11311:11311" # ROS master - Port mapping
    env_file:
      - .devcontainer/devcontainer.env
    environment:
      - LANG=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - TURTLEBOT3_MODEL=burger
      - DISPLAY=${DISPLAY}
      # ‚úîÔ∏è fix some QT bugs ; https://wiki.ros.org/docker/Tutorials/Compose
      - QT_X11_NO_MITSHM=1
      - WORKSPACE_DIR=/workspace # ‚ùó
    volumes:
      - .:/workspace
      # Shares the X11 Unix socket to enable GUI forwarding in the container. RW (Read, Write) is required for bidirectional communication.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      # Provides X authority file to authenticate GUI apps with the X server. No RW (Read, Write) needed as it's typically read-only.
      - ${HOME}/.Xauthority:/tmp/.Xauthority:ro
    devices:
      - /dev/video0     # Access to video input devices
      - /dev/ttyACM0    # Access to serial devices
      - /dev/ttyACM1
    networks:
      ros_network:
        ipv4_address: 172.18.0.2
    # üß™: may be required to access hardware and devices fully
    privileged: true
    ulimits:
      nproc: 65535
      # ‚û°Ô∏èüîó (Issue: Error); Running ROS commands in Container exhausts memory
      nofile:
        # Error: services.app.ulimits.nofile soft is required üìÖ 2025-01-14 21:55:00
        # üö® (Issue: Bug): ulimit soft not working in devcontainer from docker-compose.yml. üìÖ 2025-01-15 09:27:03
        #   However, when using `docker compose up` and `exec` to access the container, soft settings are applied as expected.
        soft: 1024
        hard: 524288
    # üí° Allocate a pseudo-TTY for development
    tty: true
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 8gb
        reservations:
          cpus: "2" 
          memory: 4gb
          devices:
            - capabilities:
                - gpu
    runtime: nvidia
    # ‚ùî `container_name`: Sets the explicit name of the Docker container for easier identification and management.
    # container_name: ros_noetic_turtlebot3-node_master


# https://docs.docker.com/reference/compose-file/networks
networks:   
  # It will create name '<project_name>_<network_name>'
  ros_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
    # ‚ùî `attachable`: Allows standalone containers to dynamically attach to this network.
    attachable: true
