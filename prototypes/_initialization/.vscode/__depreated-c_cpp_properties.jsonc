/*❌ deprecated.
  Refer to 🔗 _about/about-intellisense_for_c_cpp.md
*/
{
  "configurations": [
    {
      "name": "Raspberry Pi Kernel",
      "includePath": [
        // 🚣 Header Files
        "/usr/arm-linux-gnueabihf/include",
        // ☑️ usleep() intellisense not works. add line: "/usr/arm-linux-gnueabihf/include/sys",       // 📅 2024-12-17 10:56:33
        "/usr/arm-linux-gnueabihf/include/sys",
        "${userHome}/repos/kernels/raspberry-pi/arch/arm/include",
        "${userHome}/repos/kernels/raspberry-pi/arch/arm/include/generated",
        "${userHome}/repos/kernels/raspberry-pi/fs",
        "${userHome}/repos/kernels/raspberry-pi/include",
        "${userHome}/repos/kernels/raspberry-pi/include/generated",
        "${userHome}/repos/kernels/raspberry-pi/include/linux",
        "${userHome}/repos/kernels/raspberry-pi/include/uapi"
      ],
      "defines": [
        "__KERNEL__",
        "CONFIG_ARM",
        // 🔗 (issue); VS Code's IntelliSense does not utilize the actual kernel build system.
        "KBUILD_MODNAME=\"dummyname\"",
        "KBUILD_MODFILE=\"dummyfile.ko\""
      ],
      "compilerPath": "/usr/bin/arm-linux-gnueabihf-gcc",
      "cStandard": "c23",
      "cppStandard": "c++23",
      "intelliSenseMode": "linux-gcc-arm",
      "browse": {
        "path": [
          // 🚣 Source Files
          "${userHome}/repos/kernels/raspberry-pi/fs",
          "${userHome}/repos/kernels/raspberry-pi/lib",
          "${userHome}/repos/kernels/raspberry-pi/drivers/gpio",
          "${userHome}/repos/kernels/raspberry-pi/kernel",
          "${userHome}/repos/kernels/raspberry-pi/mm",
          "${userHome}/repos/kernels/raspberry-pi/net",
          "${userHome}/repos/kernels/raspberry-pi/arch/arm/mach-bcm"
        ],
        "limitSymbolsToIncludedHeaders": true,
        "databaseFilename": "${userHome}/repos/kernels/raspberry-pi/.vscode/browse.db"
      },
      "configurationProvider": "ms-vscode.makefile-tools"
    }
  ],
  "version": 4
}

/* 🔰✅ (How-to): Develop a custom kernel driver outside the kernel source repository (in your mono repository) 📅 2024-12-14 03:40:28
  In a Kernel source directory:
    - git clone
      Kernel Source Examples 🛍️:
        - Linux Kernel:
          https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
          (More info: https://en.wikipedia.org/wiki/Linux_kernel)
        - Raspberry Pi Kernel (Modified version of Linux Kernel):
          https://github.com/raspberrypi/linux

    Steps: %shell>
      To use a Makefile for your custom driver source code that links with the kernel's libraries, follow these steps:

      1. Get the default configuration for bcm2711_defconfig (for the Broadcom chip used in Raspberry Pi 4B):
        ```bash
        make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bcm2711_defconfig
        ```
      2. Build the kernel modules:
         - Description: Compiles the kernel modules and updates the `Module.symvers` file, which is required to resolve kernel symbol dependencies.
         - Note: `make modules` internally calls `modules_prepare`, so you can skip the explicit call to `modules_prepare` if you run `make modules`.
            - the "modules_prepare" step generates the required `include/generated/` headers and configuration files.
         ```bash
         make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules
         ```

        📝 Note:
          - The `make headers_install` command does not install the full kernel source into the user space.
            So instead, use `make modules` to set up the environment for your driver development.

  In your mono repository:
    - Configure `.vscode/c_cpp_properties.json`:
      - Add kernel-specific configurations in the `"configurations"` field to include the paths to kernel headers generated by `make modules_prepare` or `make modules`.
      - Example `includePath` additions:
        - `"path/to/kernel/include/generated"`
        - `"path/to/kernel/include"`
        - `"path/to/kernel/arch/arm/include"`

    - 📍 %VSCode> C/C++: Select a Configuration...
      - This command lets you choose one of the `"name"` fields in your `.vscode/c_cpp_properties.json` file.
      - This feature allows IntelliSense to adapt for different projects in the same repository.

    - Create Makefile.
      🛍️ e.g. Example Makefile for building your custom driver:
      
      ```makefile
      MOD := your_driver
      obj-m := $(MOD).o

      KDIR := /lib/modules/$(shell uname -r)/build
      # CROSS = ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-

      default:
        $(MAKE) -C $(KDIR) M=$(PWD) modules $(CROSS)
      ```
*/

/* ☑️ (issue); VSCode's IntelliSense does not fully work for kernel source (.c) files, even after adding includePath. 📅 2024-12-13 21:23:53
  ❔ Root Cause:
    - VS Code's IntelliSense does not use the actual kernel build system.
    - `KBUILD_MODFILE` and `KBUILD_MODNAME` macros are not automatically defined by IntelliSense.
      These macros are critical for expanding kernel macros like `MODULE_LICENSE` and `module_param`.
    - Without defining these macros, kernel macros like `MODULE_LICENSE` and `module_param` fail to expand properly, causing IntelliSense to throw errors.
  
  ➡️ Add the following lines into `c_cpp_properties.json` under `"defines"`:
    "KBUILD_MODNAME=\"dummyname\""
    "KBUILD_MODFILE=\"dummyfile.ko\""

  ❔ Problems
    * MODULE_LICENSE issue:
      Problem:
        MODULE_LICENSE("Dual BSD/GPL");
          >> expected a ';'C/C++(65)

      Solution:
        Add the following line into `c_cpp_properties.json` under `"defines"`:
          "KBUILD_MODFILE=\"dummyfile.ko\""

      Description:
        - `MODULE_LICENSE` internally expands to include `MODULE_FILE`, which depends on `KBUILD_MODFILE`.
        - Without defining `KBUILD_MODFILE`, IntelliSense cannot process the expansion correctly.


    * module_param issue:
      Problem:
        module_param(onevalue, int, 0);
          >> identifier "KBUILD_MODNAME" is undefinedC/C++(20)

      Solution:
        Add the following line into `c_cpp_properties.json` under `"defines"`:
          "KBUILD_MODNAME=\"dummyname\""

      Description:
        - The `module_param` macro relies on `KBUILD_MODNAME` for generating parameter information.
        - During kernel builds, `KBUILD_MODNAME` is automatically set by the build system, but IntelliSense lacks this step.

      Reference:
        https://github.com/microsoft/vscode-cpptools/issues/5588#issuecomment-707058864
*/
