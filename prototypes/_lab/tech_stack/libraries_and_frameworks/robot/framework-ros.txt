list of level 1 subjects
  - ROS 2
  - ROS 1
  
‚≠ï Use "catkin build" (package: python3-catkin-tools) instead of "catkin_make" üìÖ 2025-01-09 15:17:27
  - Improved build output
    "catkin build" provides cleaner and color-coded output, making it easier to understand build progress, warnings, and errors at a glance.
  - Better performance with parallel builds
    "catkin build" optimizes build times by efficiently handling parallel builds, especially in large workspaces with multiple packages.
  - Advanced package management
    It allows selective builds (build specific packages only) and offers more flexible workspace configurations.
  - Dedicated log management
    Logs for each package are stored separately, making it easier to debug build issues without cluttered output.
  - Modern and actively maintained
    "catkin build" is part of the catkin_tools package, which is more actively maintained and better suited for modern ROS workflows compared to "catkin_make".


‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª
‚öì ROS 2 ; https://www.ros.org/
  https://en.wikipedia.org/wiki/Robot_Operating_System
----------------------------------------------
ROS 2 üî™ Docs ; https://docs.ros.org/en/jazzy/index.html
  # Concepts
    # Basic Concepts
      ‚öì Nodes ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Nodes.html
      ‚öì Discovery ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Discovery.html
      ‚öì Interfaces ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Interfaces.html
      ‚öì Topics ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Topics.html
      ‚öì Services ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Services.html
      ‚öì Actions ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Actions.html
      ‚öì Parameters ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Parameters.html
      ‚öì Introspection with command line tools ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Command-Line-Tools.html
      ‚öì Launch ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Launch.html
      ‚öì Client libraries ; https://docs.ros.org/en/jazzy/Concepts/Basic/About-Client-Libraries.html
    # Intermediate Concepts
    
    # Advanced Concepts








‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª
‚öì ROS 1 ; https://wiki.ros.org/


(‚úçÔ∏è ROS 1 üî™ study)
  üö® (Issue: Error); Running ROS commands in Container exhausts memory üìÖ 2025-01-15 11:28:59
    ‚ùî‚û°Ô∏è Workaround:
        - Set Hard limit to docker-compose.yml, and fluidly adjust Soft limit in a shell session.
          üõçÔ∏è e.g. 

            ```yaml
            # üóÑÔ∏è docker-compose.yml
            services:
              app:
                ulimits:
                  # Maximum number of processes a single node or process can create in multi-process systems like ROS.
                  nproc: 65535
                  nofile:
                    ## Error: services.app.ulimits.nofile soft is required üìÖ 2025-01-14 21:55:00
                    # üö® (Issue: Bug): ulimit soft not working in devcontainer from docker-compose.yml. üìÖ 2025-01-15 09:27:03
                    #   However, when using `docker compose up` and `exec` to access the container, soft settings are applied as expected.

                    # Maximum number of file descriptors a process can use at a time, including files, sockets, pipes, and other resources.
                    soft: 1024
                    hard: 524288
            ```
            Or, Or, set the same limits for each terminal session.
            ```bash
            #!/usr/bin/bash
            ulimit -Hn 524288   # 4 MiB
            ulimit -Sn 1024     # 1 KiB
            ```

          üìù Explanation of memory calculation:
            - Each `pollfd` structure consumes 8 bytes.
            - For 524,288 file descriptors:
              - Memory consumption = 524,288 file descriptors √ó 8 bytes = 4,194,304 bytes.
              - 4,194,304 bytes = 4 MiB (Mebibytes).

        - Check value using command üßÆ %shell> ulimit -Sn && ulimit -Hn

    ‚ùî When
        in Docker ROS 1 noetic container,

        1. in ROS master
          %shell> roscore
        2. in turtlebot 3, bring up 
          %shell> roslaunch turtlebot3_bringup turtlebot3_robot.launch
        3. in ROS master
          %shell:fish> 
            rosrun rviz rviz -d (rospack find turtlebot3_description)/rviz/model.rviz
            # or 
            roslaunch turtlebot3_slam turtlebot3_slam.launch

    ‚ùî Symptom
      The container consumes all available memory, often exceeding 8GB, causing the computer to freeze or crash
      , with all other programs exiting except the desktop environment.

      >> 
        [turtlebot3_slam_gmapping-2] process has died [pid 15991, exit code -9, cmd /opt/ros/noetic/lib/gmapping/slam_gmapping __name:=turtlebot3_slam_gmapping __log:=/home/vscode/.ros/log/a631a2c4-d257-11ef-8d09-0242ac120002/turtlebot3_slam_gmapping-2.log].
        [robot_state_publisher-1] process has died [pid 15990, exit code -9, cmd /opt/ros/noetic/lib/robot_state_publisher/robot_state_publisher __name:=robot_state_publisher __log:=/home/vscode/.ros/log/a631a2c4-d257-11ef-8d09-0242ac120002/robot_state_publisher-1.log].
        ...
      >>
        [roslaunch][ERROR] 2025-01-14 10:20:53,352: ================================================================================REQUIRED process [rviz-3] has died!
          process has died [pid 1328, exit code -9, cmd /opt/ros/noetic/lib/rviz/rviz -d /opt/ros/noetic/share/turtlebot3_slam/rviz/turtlebot3_gmapping.rviz __name:=rviz __log:=/home/vscode/.ros/log/ae21d00e-d215-11ef-93ce-0242ac120002/rviz-3.log].
        ...

    ‚ùîü§î Inference
      %shell> top
      
      Swap memory usage increases significantly, with some processes consuming up to 512 MiB per process.
      It seems that there is a memory leak in ROS 1.

      üö£ OOM Killer in action
        %shell> sudo dmesg | grep -i "out of memory"
        >> 
          [ 5143.550034] Memory cgroup out of memory: Killed process 85970 (rosout) total-vm:8434156kB, anon-rss:7290240kB, file-rss:9788kB, shmem-rss:0kB, UID:1000 pgtables:14360kB oom_score_adj:0
          [ 5145.739000] Memory cgroup out of memory: Killed process 86022 (rosout) total-vm:8434156kB, anon-rss:7283072kB, file-rss:9836kB, shmem-rss:0kB, UID:1000 pgtables:14344kB oom_score_adj:0

      
    ‚ùî Root Cause
      The core issue stems from the design of the XmlRpcServer in ROS, which handles asynchronous socket communication using the pollfd structure. This structure, defined in /usr/include/poll.h, is used to monitor file descriptors. The excessive memory consumption occurs due to the following reasons:

      - pollfd Structure and Memory Usage:
        The pollfd structure is defined as:
        ```c
        struct pollfd {
            int fd;           /* File descriptor to poll. */
            short int events; /* Requested events to watch. */
            short int revents; /* Returned events. */
        };
        ```

        Each pollfd occupies 8 bytes:
          - 4 bytes for the int field.
          - 2 bytes each for the short int fields.
          - Includes alignment padding for memory efficiency on 64-bit systems.

      - The XmlRpcServer initializes a üö£ std::vector<pollfd> with a size equal to the system's file descriptor limit (ulimit -n).
        This design results in significant memory allocation.
        In many Docker container environments, this limit is often set to an extremely high value (same with Host system's value), such as 1,073,741,816.
        
        This leads to excessive memory allocation: ‚ùó 1,073,741,816 √ó 8 bytes = 8GB per ROS node.

        However, even in sufficient RAM environments, excessive pollfd allocation and communication overhead lead to memory exhaustion
          XML-RPC-Based Communication Overhead:
            - Node-to-node communication:
              Each rosrun or roslaunch instance establishes multiple network socket connections, increasing memory usage for sockets.
            - Message queues and buffers:
              Topic caches, data buffers, and message queues add additional memory overhead.
            - High swap memory usage:
              ‚ùó Observations show that even running roscore alone can result in processes consuming up to 512 MiB of swap memory per process.
              Swap memory usage spikes, further degrading system performance.

    ‚ùî References
      - roscore using up all available memory ; https://answers.ros.org/question/416357/
      - rosout high memory usage ; https://robotics.stackexchange.com/questions/93752/rosout-high-memory-usage
      - XmlRpcServer.cpp ; https://github.com/ros/ros_comm/blob/noetic-devel/utilities/xmlrpcpp/src/XmlRpcServer.cpp



----------------------------------------------
‚öìüî∞ ROS 1 üî™ Tutorials ; https://wiki.ros.org/ROS/Tutorials
  # Core ROS Tutorials
    # Beginner Level
      2.üñáÔ∏è‚öì Navigating the ROS Filesystem ; https://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem üìÖ 2025-01-09 19:50:38
        # Filesystem Tools
          #Ô∏è‚É£üßÆ Using rospack ; https://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem#ROS.2FTutorials.2Fcatkin.2FNavigatingTheFilesystem.Using_rospack
          #Ô∏è‚É£üßÆ Using roscd ; https://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem#ROS.2FTutorials.2Fcatkin.2FNavigatingTheFilesystem.Using_roscd
            üö£ Note that roscd, like other ROS tools, will only find ROS packages that are within the directories listed in your ROS_PACKAGE_PATH. To see what is in your ROS_PACKAGE_PATH, type:
              %shell> echo $ROS_PACKAGE_PATH

            # Subdirectories

          #Ô∏è‚É£üßÆ roscd log ; https://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem#ROS.2FTutorials.2Fcatkin.2FNavigatingTheFilesystem.roscd_log
            roscd log will take you to the folder where ROS stores log files.
            üö£ Note that if you have not run any ROS programs yet, this will yield an error saying that it does not yet exist.


          #Ô∏è‚É£üßÆ Using rosls ; https://wiki.ros.org/ROS/Tutorials/NavigatingTheFilesystem#ROS.2FTutorials.2Fcatkin.2FNavigatingTheFilesystem.Using_rosls


      3.üñáÔ∏è‚öì Creating a ROS Package ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage üìÖ 2025-01-09 16:17:17
        #Ô∏è‚É£ What makes up a catkin Package? ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.What_makes_up_a_catkin_Package.3F
        #Ô∏è‚É£üí°üó∫Ô∏è Packages in a catkin Workspace ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.Packages_in_a_catkin_Workspace
        #Ô∏è‚É£ Creating a catkin Package ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.Creating_a_catkin_Package
          ‚ùï catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
          %shell>
            mkdir -p /workspace/src && cd /workspace/src && \
            catkin_create_pkg beginner_tutorials std_msgs rospy roscpp &&  \
        #Ô∏è‚É£ Building a catkin workspace and sourcing the setup file ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.Building_a_catkin_workspace_and_sourcing_the_setup_file
          %shell>
            cd /workspace && \
            catkin_make && replay source /workspace/devel/setup.bash
        #Ô∏è‚É£ package dependencies ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.package_dependencies
          üìù You need to run this before checking dependencies to ensure that all dependencies are resolved and up-to-date.
            ‚ùó %shell> rosdep update
          # ü™± First-order dependencies
            ‚ùî When using catkin_create_pkg earlier, a few package dependencies were provided.
              These first-order dependencies can now be reviewed with the rospack tool.
            %shell>
              rospack depends1 beginner_tutorials
              # These dependencies for a package are stored in the package.xml file:
              #   %shell> roscd beginner_tutorials && cat package.xml
          # ü™± Indirect dependencies
            In many cases, a dependency will also have its own dependencies. ...
            %shell> rospack depends1 rospy
            
            üö£ A package can have quite a few indirect dependencies. Luckily rospack can recursively determine all nested dependencie
            %shell> rospack depends rospy

        #Ô∏è‚É£ Customizing Your Package ; https://wiki.ros.org/ROS/Tutorials/CreatingPackage#ROS.2FTutorials.2Fcatkin.2FCreatingPackage.Customizing_Your_Package
          # Customizing the package.xml
            # description tag
            # maintainer tags
            # license tags
            # dependencies tags
              https://wiki.ros.org/catkin/package.xml#Build.2C_Run.2C_and_Test_Dependencies
                - ü™± Build Dependencies
                  Dependencies required to build this package itself.
                - ü™± Build Export Dependencies
                  Dependencies required during the build process when another package depends on this package.
                - Execution Dependencies
                - Test Dependencies
                - Build Tool Dependencies
                  e.g. catkin, ament_cmake
                - Documentation Tool Dependencies
            # Final package.xml
          # Customizing the CMakeLists.txt

      10.üñáÔ∏è‚öì Creating a ROS msg and srv ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv üìÖ 2025-01-09 16:18:05
        #Ô∏è‚É£ Introduction to ü™± msg (message) and ü™± srv (service); https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Creating_a_srv
          msg: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.
          srv: an srv file describes a service. It is composed of two parts: a ü™± request and a response.
        #Ô∏è‚É£ Using msg ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Using_msg
          # Creating a msg
            %shell:fish> roscd beginner_tutorials && mkdir -p msg && echo "int64 num" > msg/Num.msg

            ‚ö†Ô∏è You may notice that sometimes your project builds fine even if you did not call find_package with all dependencies.
              This is because catkin combines all your projects into one, so if an earlier project calls find_package, yours is configured with the same values.
              But forgetting the call means your project can easily break when built in isolation.

        #Ô∏è‚É£ Using rosmsg ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Using_rosmsg
          ‚ùï %shell:fish> rosmsg show [message type]

          %shell:fish> rosmsg show beginner_tutorials/Num

          üö£ If you can't remember which Package a msg is in, you can leave out the package name. Try:
            %shell:fish> rosmsg show Num
        #Ô∏è‚É£ Using srv ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Using_srv
          #Ô∏è‚É£ Creating a srv ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Creating_a_srv
            ‚ùï shell:fish> roscp [package_name] [file_to_copy_path] [copy_path]
            %shell:fish>
              roscd beginner_tutorials && mkdir srv && \
              roscp rospy_tutorials srv/AddTwoInts.srv srv/AddTwoInts.srv
            
            Unless you have done so already, open package.xml, and make sure these two lines are in it and uncommented ...
            ‚ùï As before, note that at build time, we need "message_generation", while at runtime, we only need "message_runtime".
            ‚ùó (Despite its name, message_generation works for both msg and srv.)

          #Ô∏è‚É£ Using rossrv ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Using_rossrv
            %shell:fish>
              rossrv show beginner_tutorials/AddTwoInts
              echo "========================="
              # Here, two services are shown. The first is the one you just created in the beginner_tutorials package, and the second is the pre-existing one from the rospy_tutorials package.
              rossrv show AddTwoInts
        #Ô∏è‚É£ Common step for msg and srv ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Common_step_for_msg_and_srv
          %shell:fish>
            roscd beginner_tutorials && cd ../.. && \
            catkin_make
            cd -
          Or, use catkin build (‚≠ï More Flexible! )
          %shell:fish>
            roscd beginner_tutorials && cd ../.. && \
            catkin build
            cd -

          https://wiki.ros.org/action/show/msg
          üìç Any .msg file in the msg directory will generate code for use in all supported languages. 
            # c++ files
            tree /workspacedevel/include
            # python files
            tree /workspace/devel/lib/python3/dist-packages
            # lisp files
            tree /workspace/devel/share/common-lisp
          ‚öñÔ∏è Similarly, any .srv files in the srv directory will have generated code in supported languages.
            For C++, this will generate header files in the same directory as the message header files.
            For Python and Lisp, there will be an 'srv' folder beside the 'msg' folders.
        #Ô∏è‚É£ Getting Help ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Getting_Help
          %shell>
            rosmsg show -h
            rosmsg list | grep beginner_tutorials
            rospack find beginner_tutorials
            rospack find rospy_tutorials
        #Ô∏è‚É£ Review ; https://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Review
          Let's just list some of the commands we've used so far:
            - rospack = ros+pack(age) : provides information related to ROS packages
            - roscd = ros+cd : changes directory to a ROS package or stack
            - rosls = ros+ls : lists files in a ROS package
            - roscp = ros+cp : copies files from/to a ROS package
            - rosmsg = ros+msg : provides information related to ROS message definitions
            - rossrv = ros+srv : provides information related to ROS service definitions
            - catkin_make : makes (compiles) a ROS package
              rosmake = ros+make : makes (compiles) a ROS package (if you're not using a catkin workspace)
            - ‚ùó catkin build: makes (compiles) a ROS package in an isolated manner while maintaining efficiency due to parallelisation
              catkin_make + catkin_make_isolated


    # Intermediate Level  

----------------------------------------------
ü•û ROS 1 üî™ Packages
  ‚öì rosbash ; https://wiki.ros.org/rosbash
    # Other Shells
      fish    
    # Command line utilities
      - üßÆ roscd
        change directory starting with package, stack, or location name
        <package-or-stack>[/subdir]
      - üßÆ rospd
        lists directories in the directory-stack
      - üßÆ rosd
        list files of a ros package
      - üßÆ rosls
      - üßÆ rosed
        edit a file in a package
      - üßÆ roscp
        copy a file from a package
      - üßÆ rosrun
        run executables of a ros package
        rosrun <package> <executable>
  ‚öì rospy_tutorials ; https://wiki.ros.org/rospy_tutorials

