list of level 1 subjects
  - Git
  
‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª‚Äª
‚öì‚≠ï Git ; https://git-scm.com/
  Git is a distributed version control system that tracks versions of files.
  https://github.com/git/git
  https://en.wikipedia.org/wiki/Git
----------------------------------------------
Git üî™ Docs ; https://git-scm.com/docs
  #üî∞ Guides
    ‚öì Git Glossary ; https://git-scm.com/docs/gitglossary
      #Ô∏è‚É£üìéüö£ branch ; https://git-scm.com/docs/gitglossary
        A "branch" is a line of development. üö£ The most recent commit on a branch is referred to as the tip of that branch.
      # index
      # working tree
      # HEAD
      # checkout
      # pathspec
        ... A pathspec that begins with a colon : has special meaning. In the short form, the leading colon : is followed by zero or more "magic signature" letters (which optionally is terminated by another colon :), and the remainder is the pattern to match against the path. ...

        # exclude
          After a path matches any non-exclude pathspec, it will be run through all exclude pathspecs (magic signature: ! or its synonym ^). If it matches, the path is ignored. When there is no non-exclude pathspec, the exclusion is applied to the result set as if invoked without any pathspec.
    ‚öì gitignore ; https://git-scm.com/docs/gitignore
      - Two consecutive asterisks ("**")
    ‚öìüí° Revision ; https://git-scm.com/docs/gitrevisions
      #Ô∏è‚É£ SPECIFYING RANGES ; https://git-scm.com/docs/gitrevisions#_specifying_ranges
        #Ô∏è‚É£ Commit Exclusions ; https://git-scm.com/docs/gitrevisions#_commit_exclusions
        #Ô∏è‚É£ Dotted Range Notations ; https://git-scm.com/docs/gitrevisions#_dotted_range_notations
        #Ô∏è‚É£ Other <rev>^ Parent Shorthand Notations ; https://git-scm.com/docs/gitrevisions#_other_rev_parent_shorthand_notations
      #Ô∏è‚É£üö£ Revision Range Summary ; https://git-scm.com/docs/gitrevisions#_revision_range_summary
  # Setup and Config
    ‚öì‚öñÔ∏è git-config ; https://git-scm.com/docs/git-config
      #Ô∏è‚É£ CONFIGURATION FILE ; https://git-scm.com/docs/git-config#_configuration_file
        #Ô∏è‚É£ Variables ; https://git-scm.com/docs/git-config#_variables
          #Ô∏è‚É£üìé core.fileMode ; https://git-scm.com/docs/git-config#Documentation/git-config.txt-corefileMode üìÖ 2024-11-24 23:30:01
            Tells Git if the ü™± executable bit of files in the working tree is to be honored.

      
    ‚öì git config credential.helper 'store [<options>]' ; https://git-scm.com/docs/git-credential-store
      git-credential-store - Helper to store credentials on disk
    ‚öì git config credential.helper 'cache [<options>]' ; https://git-scm.com/docs/git-credential-cache
      git-credential-cache - Helper to temporarily store passwords in memory

  # Getting and Creating Projects
    ‚öì git init ; https://git-scm.com/docs/git-init
    ‚öì git clone ; https://git-scm.com/docs/git-clone
      # OPTIONS
        üö£ -b, --branch <name> https://git-scm.com/docs/git-clone#Documentation/git-clone.txt-code-bcodeemltnamegtem

  # Basic Snapshotting
    ‚öì git add ... ; https://git-scm.com/docs/git-add
      git-add - Add file contents to the index
      #Ô∏è‚É£ SYNOPSIS
        git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]
          [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]
          [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]
          [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>‚Ä¶‚Äã]



    ‚öì git rm ... ; https://git-scm.com/docs/git-rm
      git-rm - Remove files from the working tree and from the index
      
      #Ô∏è‚É£üí° DESCRIPTION ; https://git-scm.com/docs/git-rm#_description
        When --cached is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from just the index.
        https://stackoverflow.com/questions/1143796/remove-a-file-from-a-git-repository-without-deleting-it-from-the-local-filesyste




    ‚öì git commit ... ; https://git-scm.com/docs/git-commit
      git-commit - Record changes to the repository
      #Ô∏è‚É£ OPTIONS ; https://git-scm.com/docs/git-commit#_options
        #Ô∏è‚É£ -a, --all ; https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--a
          Tell the command to automatically stage files that have been modified and deleted
          üö£ , but new files you have not told Git about are not affected.
        #Ô∏è‚É£ --amend ; https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---amend




    ‚öì git diff ; https://git-scm.com/docs/git-diff
      git-diff - Show changes between commits, commit and working tree, etc



    ‚öì git reset (--patch | -p) [<tree-ish>] [--] [<pathspec>‚Ä¶‚Äã] ; https://git-scm.com/docs/git-reset
      git-reset - Reset current HEAD to the specified state
      #Ô∏è‚É£ DESCRIPTION ; https://git-scm.com/docs/git-reset#_description
        This means that git reset <pathspec> is the opposite of git add <pathspec>. This command is equivalent to git restore [--source=<tree-ish>] --staged <pathspec>....
        git checkout (-p|--patch) [<tree-ish>] [--] [<pathspec>‚Ä¶‚Äã]


  # Branching and Merging
    ‚öì git branch (-m | -M) [<oldbranch>] <newbranch> ; https://git-scm.com/docs/git-branch
      git-branch - List, create, or delete branches
      
      #Ô∏è‚É£ OPTIONS ; https://git-scm.com/docs/git-branch#_options
        #Ô∏è‚É£ -m, -move ; https://git-scm.com/docs/git-branch#Documentation/git-branch.txt--m
          Move/rename a branch, together with its config and reflog.

    ‚öì git sparse-checkout (init | list | set | add | reapply | disable) [<options>] ; https://www.git-scm.com/docs/git-sparse-checkout
      git-sparse-checkout - Reduce your working tree to a subset of tracked files
      #Ô∏è‚É£ COMMANDS ; https://git-scm.com/docs/git-sparse-checkout#_commands
        When --no-cone is passed, ...
      #Ô∏è‚É£ EXAMPLES ; https://www.git-scm.com/docs/git-sparse-checkout#_examples
        #Ô∏è‚É£ git sparse-checkout set MY/DIR1 SUB/DIR2 ; https://www.git-scm.com/docs/git-sparse-checkout#Documentation/git-sparse-checkout.txt-codegitsparse-checkoutsetMYDIR1SUBDIR2code
    
    ‚öì git merge ... [<commit>‚Ä¶‚Äã] ; https://git-scm.com/docs/git-merge
      git-merge - Join two or more development histories together
      #Ô∏è‚É£ SYNOPSIS ; https://git-scm.com/docs/git-merge#_synopsis
        git merge ... [<commit>‚Ä¶‚Äã]
      #Ô∏è‚É£ OPTIONS ; 
        #Ô∏è‚É£üö£ --squash, --no-squash ; https://git-scm.com/docs/git-merge#Documentation/git-merge.txt---squash
          Produce the working tree and index state as if a real merge happened (except for the merge information)
          ‚ö†Ô∏è , but do not actually make a commit, ...
      #Ô∏è‚É£üí° HOW CONFLICTS ARE PRESENTED ; https://git-scm.com/docs/git-merge#_how_conflicts_are_presented
        The area where a pair of conflicting changes happened is marked with markers <<<<<<<, =======, and >>>>>>>.
        The part before the ======= is typically your side, and the part afterwards is typically their side.
    
    ‚öì git tag ; https://git-scm.com/docs/git-tag



  # Sharing and Updating Projects
    ‚öì git push ... ; https://git-scm.com/docs/git-push
      #Ô∏è‚É£ SYNOPSIS
        git push ... [<repository> [<refspec>‚Ä¶‚Äã]]
      #Ô∏è‚É£üí° DESCRIPTION ; https://git-scm.com/docs/git-push#_description
        When the command line does not specify where to push with the <repository> argument, branch.*.remote configuration for the current branch is consulted to determine where to push. If the configuration is missing, it defaults to origin.
  
  
  
  # Inspection and Comparison
    ‚öìüí° git log [<options>] [<revision range>] [[--] <path>‚Ä¶‚Äã] ; https://git-scm.com/docs/git-log
      git-log - Show commit logs
      #Ô∏è‚É£ DESCRIPTION ; https://git-scm.com/docs/git-log#_description
        üö£ A special notation "<commit1>..<commit2>" ... (dobule dot)
        üö£ Another special notation is "<commit1>‚Ä¶‚Äã<commit2> ... (triplet dot)
        
      #Ô∏è‚É£ OPTIONS ; https://git-scm.com/docs/git-log#_options
        #Ô∏è‚É£ --ancestry-path[=<commit>] ; https://git-scm.com/docs/git-log#Documentation/git-log.txt---ancestry-pathltcommitgt-1



  # Patching
    ‚öì git rebase ... ; https://git-scm.com/docs/git-rebase
      git-rebase - Reapply commits on top of another base tip
      #Ô∏è‚É£ SYNOPSIS ; https://git-scm.com/docs/git-rebase#_synopsis
        git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
        git rebase [-i | --interactive] [<options>] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
        git rebase (--continue | --skip | --abort | --quit | --edit-todo | --show-current-patch)
      #Ô∏è‚É£ DESCRIPTION ; https://git-scm.com/docs/git-rebase#_description

      #Ô∏è‚É£ OPTIONS ; https://git-scm.com/docs/git-rebase#_options
        #Ô∏è‚É£üí° -r, --rebase-merges[=(rebase-cousins|no-rebase-cousins)] ; https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt--r
          By default, a rebase will simply drop merge commits from the todo list, and put the rebased commits into a single, linear branch.
        #Ô∏è‚É£ --onto <newbase> ; https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---ontoltnewbasegt

        #Ô∏è‚É£ -i, --interactive ; https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt--i
        & https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---interactive
        #Ô∏è‚É£ --root ; https://git-scm.com/docs/git-rebase#Documentation/git-rebase.txt---root
          üìù &comment
            &e.g. squash all commit into one
              https://stackoverflow.com/questions/1657017/how-to-squash-all-git-commits-into-one
              %shell> git rebase --root -i
                replace all "pick" with "squash" except for one "pick" in interactive windows

              specifiy the number of rebase commit: %shell> git rebase -i origin/HEAD~<natural_number>
    ‚öì git git cherry-pick ... ; https://git-scm.com/docs/git-cherry-pick
      git-cherry-pick - Apply the changes introduced by some existing commits



  # Debugging



  # Email



  # External Systems



  #üí°~ Administration
    ‚öì git gc ... ; https://git-scm.com/docs/git-gc
      üìù &comment
        &e.g.; %shell> git gc --aggressive --prune=now
      git-gc - Cleanup unnecessary files and optimize the local repository
      #Ô∏è‚É£ SYNOPSIS ; https://git-scm.com/docs/git-gc#_synopsis
      #Ô∏è‚É£üìç AGGRESSIVE ; https://git-scm.com/docs/git-gc#_aggressive
    ‚öì git archive ... ; https://git-scm.com/docs/git-archive
      git-archive - Create an archive of files from a named tree
      #Ô∏è‚É£ SYNOPSIS ; https://git-scm.com/docs/git-archive#_synopsis
        git archive [--format=<fmt>] [--list] [--prefix=<prefix>/] [<extra>]
        [-o <file> | --output=<file>] [--worktree-attributes]
        [--remote=<repo> [--exec=<git-upload-archive>]] <tree-ish>
        [<path>‚Ä¶‚Äã]
    ‚öì git reflog ; https://git-scm.com/docs/git-reflog



  # Server Admin



  # Plumbing Commands

(‚úçÔ∏è Git study)
  - [Trend] ‚ùå Do not use git checkout ; https://github.blog/open-source/git/highlights-from-git-2-23/ üìÖ 2024-12-10 18:57:04
    instead, use "git switch" and "git restore"

  - ‚úÖ (how-to); ways of Git remote access üìÖ 2023-01-11 19:00:56
    when git remote add origin <link> and on a state in which git credentials is not registered.
      - <link> = git@github.com:{username}/{project}.git
        This is treated as a remote address for SSH.
      - <link> = https://{username}:{password}@github.com/{username}/{project}.git
        This is treated as a remote address for HTTPS.

  - ‚úÖ (how-to); how to compress LZMA like .7z by filtering files list in .gitignore üìÖ 2022-12-15 00:58:00
    #!/bin/bash
    git archive main --format=tar | xz -vz --threads=2 > ../study-python.tar.xz

    # https://stackoverflow.com/questions/12075528/how-to-make-git-archive-in-7zip-format
    # Note that xz and 7z use the same compression algorithm (LZMA). You can then unpack it with xz -d.
    # .tar (tape archive) does not compress size, only archive.
    # When I testing, .tar with xz will have most small size.
  - ‚úÖ (how-to); use SSH in git
    Solution
      (create SSH key)
        a. create ssh key in a host and save the key into arbitrary path.
          %shell> ssh-keygen -t rsa -C <comment>

          then, public key and private key file (.pub) will be created.

          aa. (optional) register passphrase
          ab. (optional) save key's randomart into arbitrary path.
        c. %shell> cat <private key file>
        d. register SSH key in setting of git site.
      (activate ssh agent in a terminal)
        if you are not Windows OS, you should add public key in ssh agent in order to do any git operation
          %shell>
            eval $(ssh-agent);
            ssh-add <public key file>;
          &e.g
            eval $(ssh-agent) && ssh-add ../../gs_store_ssh_key;
      (clone) 
        %shell> git clone <ssh git URL> --config core.sshCommand="ssh -i <public key file>"
        git clone git@bitbucket.org:triiiplet/gs_store.git --config core.sshCommand="ssh -i gs_store_ssh_key"
  - ‚úÖ (how-to); create pull request
    Solution
      1 folk <original_repository> using source-code-hosting facilities.
      2 %shell> git clone <folked_repository>
      3 %shell> git remote add <name> <original_repository_git_url>
        üí° üìù &comment;  privately I named as "root"
      4 in cloned root directory, %shell> git checkout -b <new_branch_name>
      5 git add, commit
      6 %shell> git push origin <my_branch_name>
      7 create pull request
        ‚ö†Ô∏è üìù &comment; 
          it can not create pull request to other repository by using https://marketplace.visualstudio.com/items?itemName=Atlassian.atlascode.
          so, create in bitbucket homepage
      8 when author's original repostiroy merges pull request, remove used branch




----------------------------------------------
Git üî™ Utility
  ‚öì‚≠ï gitignore generator ; https://www.toptal.com/developers/gitignore

----------------------------------------------
Temp
  git rebase Í∏∞Ï¥à ; https://readystory.tistory.com/151, https://hajoung56.tistory.com/5
  ‚öìüí° Git branching strategies
    - in Azure ; https://learn.microsoft.com/en-us/azure/devops/repos/git/git-branching-guidance
